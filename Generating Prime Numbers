int is_prime[1000001];
void sieve()
{
  int maxN=1000000;
  for(int i=1;i<=maxN;i++)
  {
    is_prime[i]=1;
  }
  is_prime[0]=0;
  is_prime[1]=0;
  for(int i=2;i*i<=maxN;i++)
  {
    if(is_prime[i])
    {
      for(int j=i*i;j<=maxN;j+=i)
      {
      /*
      i=2 -> j=4,6,8,10....
      i=3 -> j=9,12,15,18....
      .
      .
      .
      i=7-> j=49,56,63,70...
      */
        is_prime[j]=0;
      }
    }
}
/*
This Algorithm will intialize 0 to the composite numbers[Index of Array]
and 1 to the Prime numbers
*/
/* 
You Can Now Print all Prime numbers from 0 to N(N<=1000000) by using this :
*/
for(int k=0;k<=N;k++)
{
  if(is_prime[k]==1)
  {
    cout<<is_prime[k]<<" ";
  }
}
  
  
